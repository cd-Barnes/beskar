// Code generated by kun; DO NOT EDIT.
// github.com/RussellLuo/kun

package apiv1

import (
	"context"

	"github.com/RussellLuo/kun/pkg/httpoption"
	"github.com/RussellLuo/validating/v3"
	"github.com/go-kit/kit/endpoint"
)

type AddRemoteRequest struct {
	Repository string                  `json:"repository"`
	Properties *OSTreeRemoteProperties `json:"properties"`
}

// ValidateAddRemoteRequest creates a validator for AddRemoteRequest.
func ValidateAddRemoteRequest(newSchema func(*AddRemoteRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*AddRemoteRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type AddRemoteResponse struct {
	Err error `json:"-"`
}

func (r *AddRemoteResponse) Body() interface{} { return r }

// Failed implements endpoint.Failer.
func (r *AddRemoteResponse) Failed() error { return r.Err }

// MakeEndpointOfAddRemote creates the endpoint for s.AddRemote.
func MakeEndpointOfAddRemote(s OSTree) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*AddRemoteRequest)
		err := s.AddRemote(
			ctx,
			req.Repository,
			req.Properties,
		)
		return &AddRemoteResponse{
			Err: err,
		}, nil
	}
}

type CreateRepositoryRequest struct {
	Repository string                      `json:"repository"`
	Properties *OSTreeRepositoryProperties `json:"properties"`
}

// ValidateCreateRepositoryRequest creates a validator for CreateRepositoryRequest.
func ValidateCreateRepositoryRequest(newSchema func(*CreateRepositoryRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*CreateRepositoryRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type CreateRepositoryResponse struct {
	Err error `json:"-"`
}

func (r *CreateRepositoryResponse) Body() interface{} { return r }

// Failed implements endpoint.Failer.
func (r *CreateRepositoryResponse) Failed() error { return r.Err }

// MakeEndpointOfCreateRepository creates the endpoint for s.CreateRepository.
func MakeEndpointOfCreateRepository(s OSTree) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*CreateRepositoryRequest)
		err := s.CreateRepository(
			ctx,
			req.Repository,
			req.Properties,
		)
		return &CreateRepositoryResponse{
			Err: err,
		}, nil
	}
}

type DeleteRemoteRequest struct {
	Repository string `json:"repository"`
	RemoteName string `json:"remote_name"`
}

// ValidateDeleteRemoteRequest creates a validator for DeleteRemoteRequest.
func ValidateDeleteRemoteRequest(newSchema func(*DeleteRemoteRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*DeleteRemoteRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type DeleteRemoteResponse struct {
	Err error `json:"-"`
}

func (r *DeleteRemoteResponse) Body() interface{} { return r }

// Failed implements endpoint.Failer.
func (r *DeleteRemoteResponse) Failed() error { return r.Err }

// MakeEndpointOfDeleteRemote creates the endpoint for s.DeleteRemote.
func MakeEndpointOfDeleteRemote(s OSTree) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*DeleteRemoteRequest)
		err := s.DeleteRemote(
			ctx,
			req.Repository,
			req.RemoteName,
		)
		return &DeleteRemoteResponse{
			Err: err,
		}, nil
	}
}

type DeleteRepositoryRequest struct {
	Repository string `json:"repository"`
}

// ValidateDeleteRepositoryRequest creates a validator for DeleteRepositoryRequest.
func ValidateDeleteRepositoryRequest(newSchema func(*DeleteRepositoryRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*DeleteRepositoryRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type DeleteRepositoryResponse struct {
	Err error `json:"-"`
}

func (r *DeleteRepositoryResponse) Body() interface{} { return r }

// Failed implements endpoint.Failer.
func (r *DeleteRepositoryResponse) Failed() error { return r.Err }

// MakeEndpointOfDeleteRepository creates the endpoint for s.DeleteRepository.
func MakeEndpointOfDeleteRepository(s OSTree) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*DeleteRepositoryRequest)
		err := s.DeleteRepository(
			ctx,
			req.Repository,
		)
		return &DeleteRepositoryResponse{
			Err: err,
		}, nil
	}
}

type GetRepositorySyncStatusRequest struct {
	Repository string `json:"repository"`
}

// ValidateGetRepositorySyncStatusRequest creates a validator for GetRepositorySyncStatusRequest.
func ValidateGetRepositorySyncStatusRequest(newSchema func(*GetRepositorySyncStatusRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*GetRepositorySyncStatusRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type GetRepositorySyncStatusResponse struct {
	SyncStatus *SyncStatus `json:"sync_status"`
	Err        error       `json:"-"`
}

func (r *GetRepositorySyncStatusResponse) Body() interface{} { return r }

// Failed implements endpoint.Failer.
func (r *GetRepositorySyncStatusResponse) Failed() error { return r.Err }

// MakeEndpointOfGetRepositorySyncStatus creates the endpoint for s.GetRepositorySyncStatus.
func MakeEndpointOfGetRepositorySyncStatus(s OSTree) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*GetRepositorySyncStatusRequest)
		syncStatus, err := s.GetRepositorySyncStatus(
			ctx,
			req.Repository,
		)
		return &GetRepositorySyncStatusResponse{
			SyncStatus: syncStatus,
			Err:        err,
		}, nil
	}
}

type SyncRepositoryRequest struct {
	Repository string                       `json:"repository"`
	Properties *OSTreeRepositorySyncRequest `json:"properties"`
}

// ValidateSyncRepositoryRequest creates a validator for SyncRepositoryRequest.
func ValidateSyncRepositoryRequest(newSchema func(*SyncRepositoryRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*SyncRepositoryRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type SyncRepositoryResponse struct {
	Err error `json:"-"`
}

func (r *SyncRepositoryResponse) Body() interface{} { return r }

// Failed implements endpoint.Failer.
func (r *SyncRepositoryResponse) Failed() error { return r.Err }

// MakeEndpointOfSyncRepository creates the endpoint for s.SyncRepository.
func MakeEndpointOfSyncRepository(s OSTree) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*SyncRepositoryRequest)
		err := s.SyncRepository(
			ctx,
			req.Repository,
			req.Properties,
		)
		return &SyncRepositoryResponse{
			Err: err,
		}, nil
	}
}

type UpdateRemoteRequest struct {
	Repository string                  `json:"repository"`
	RemoteName string                  `json:"remote_name"`
	Properties *OSTreeRemoteProperties `json:"properties"`
}

// ValidateUpdateRemoteRequest creates a validator for UpdateRemoteRequest.
func ValidateUpdateRemoteRequest(newSchema func(*UpdateRemoteRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*UpdateRemoteRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type UpdateRemoteResponse struct {
	Err error `json:"-"`
}

func (r *UpdateRemoteResponse) Body() interface{} { return r }

// Failed implements endpoint.Failer.
func (r *UpdateRemoteResponse) Failed() error { return r.Err }

// MakeEndpointOfUpdateRemote creates the endpoint for s.UpdateRemote.
func MakeEndpointOfUpdateRemote(s OSTree) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*UpdateRemoteRequest)
		err := s.UpdateRemote(
			ctx,
			req.Repository,
			req.RemoteName,
			req.Properties,
		)
		return &UpdateRemoteResponse{
			Err: err,
		}, nil
	}
}
